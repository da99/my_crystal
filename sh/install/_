#!/usr/bin/env mksh
#

# === {{CMD}}  # Installs Crystal to /tmp
# === Installs Crystal version specified in configs/crystal-version

get-output () {
  "$@" 2>/dev/null || :
}

if [[ "$(arch)" != 'x86_64' ]]; then
  echo "!!! Only 64-bit architecures supported." >&2
  echo "   (Only 512 fibers allowed in 32-bit architectures.)" >&2
  exit 2
fi

case "$(lsb_release -r -c -s)" in
  "rolling void")
    PATH="$PATH:$THIS_DIR/../my_os/bin"
    my_os package --install libevent-devel gc gc-devel lzo-devel libmcrypt-devel libgcrypt-devel libressl-devel
    ;;
esac

local +x VERSION="$(my_crystal current)"
local +x DIR="$THIS_DIR/tmp/crystal-versions/$VERSION"
local +x LATEST_LINK="$THIS_DIR/tmp/latest-crystal"
local +x CRYSTAL="$LATEST_LINK/bin/crystal"

if [[ -z "$VERSION" ]]; then
  echo "!!! Could not determine latest Crystal download on the Internet." >&2
  exit 1
fi

if [[ "$(realpath "$LATEST_LINK")" == "$(realpath "$DIR")"  && -x "$CRYSTAL" ]]; then
  echo "=== Already installed: " >&2
  echo "$VERSION" >&2
  my_crystal --version
  return 0
fi

mkdir -p "$(dirname "$DIR")"
mkdir -p "$THIS_DIR/tmp"

local +x TMP_FILE="$(my_crystal download $VERSION)"
if [[ -z "$TMP_FILE" ]]; then
  exit 5
fi

cd "$(dirname "$DIR")"
tar -zxf "$TMP_FILE"
mv "${VERSION%%-linux-*}" "$VERSION"

rm -f "$LATEST_LINK"
ln -s "$DIR" "$LATEST_LINK"

echo "$LATEST" > "$CRYSTAL_VERSION_FILE"
echo "=== Installed Crystal:" >&2
"$CRYSTAL" --version


